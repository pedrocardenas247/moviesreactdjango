{"version":3,"sources":["assets/img/logo.png","assets/img/not_movie.jpg","components/HeaderItem.js","services/services.js","components/Header.js","components/Movie.js","components/Movies.js","components/MovieSelected.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderItem","objItem","changeCategory","className","onClick","e","category_id","category","getMovies","a","fetch","response","json","getItems","Header","useState","items","setItems","useEffect","then","style","display","justifyContent","src","require","alt","width","map","key","Movie","objMovie","SetMovieSelected","clickMovie","imagen","title","language","relase_year","sinopsis","Movies","movies","setMovies","sumar","setSumar","rpta","movie_id","filter","filtMovie","MovieSelected","movieSelected","App","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,uFCiB5BC,EAfI,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,eAO5B,OACE,yBAAKC,UAAU,iBACb,4BAAQA,UAAU,iBAAiBC,QAPnB,SAACC,GACjBA,EAAIJ,EAAQK,YACZJ,EAAeG,KAK0CJ,EAAQM,Y,uBCX1DC,EAAS,uCAAG,8BAAAC,EAAA,sEACAC,MAAM,6DADN,cACjBC,EADiB,gBAEJA,EAASC,OAFL,cAEjBA,EAFiB,yBAGdA,GAHc,2CAAH,qDAMRC,EAAQ,uCAAG,8BAAAJ,EAAA,sEACAC,MAAM,+DADN,cACjBC,EADiB,gBAEJA,EAASC,OAFL,cAEjBA,EAFiB,yBAGdA,GAHc,2CAAH,qDCoBPE,EAtBA,SAAC,GAAsB,IAArBZ,EAAoB,EAApBA,eAAoB,EACTa,mBAAS,CAAC,IADD,mBAC5BC,EAD4B,KACrBC,EADqB,KAQnC,OAJAC,qBAAU,WACRL,IAAWM,KAAKF,KACf,IAGD,6BACE,yBAAKG,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAAW,yBAAKnB,UAAU,MAAOoB,IAAKC,EAAQ,IAA2BC,IAAI,OAAOC,MAAM,SACtI,yBAAKvB,UAAU,OACda,EAAMW,KAAI,SAAC1B,GACX,OAAO,kBAAC,EAAD,CAAYA,QAAUA,EAAS2B,IAAK3B,EAAQK,YACnDJ,eAAgBA,UCgBV2B,EAhCD,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,iBAEjBC,EAAa,WACfD,EAAiBD,IAGvB,OACE,yBAAK3B,UAAU,iBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,WAAWC,QAAU4B,GAClC,yBAAKT,IAAKO,EAASG,OAAQP,MAAM,MAAMD,IAAKK,EAASI,MAAO/B,UAAU,kBAExE,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,4BAAK2B,EAASI,QAEhB,yBAAK/B,UAAU,aACb,4BAAI,8BAAM,2CAAN,IAAgC2B,EAASK,UAA7C,YAEA,8BAAM,2CAAN,IAA6BL,EAASM,eAGxCL,EACE,4BAAQ5B,UAAU,aAAaC,QAAU4B,GAAzC,kBACA,yBAAK7B,UAAU,oBAAoB2B,EAASO,cCkBzCC,EArCA,SAAC,GAAwB,IAAvBP,EAAsB,EAAtBA,iBAAsB,EACThB,mBAAS,IADA,mBAC9BwB,EAD8B,KACtBC,EADsB,OAEZzB,mBAAS,GAFG,mBAE9B0B,EAF8B,KAEvBC,EAFuB,KAIrCxB,qBAAU,WACRV,IAAYW,MAAK,SAACwB,GAChBH,EAAUG,QAEX,CAACF,IAOJ,OACE,yBAAKtC,UAAU,YACb,kBAAC,EAAD,CAAQD,eAPW,SAACuC,GACtBC,EAASD,MAOL,yBAAKtC,UAAU,OAEN,GAATsC,EACEF,EAAOZ,KAAI,SAACG,GACL,OAAO,kBAAC,EAAD,CAAOA,SAAWA,EAAUF,IAAKE,EAASc,SACjDb,iBAAkBA,OAEzBQ,EAAOM,QAAO,SAAAC,GAAS,OAAIA,EAAUvC,SAAS,IAAMkC,KAAOd,KAAI,SAACG,GACxD,OAAO,kBAAC,EAAD,CAAOA,SAAWA,EAAUF,IAAKE,EAASc,SACjDb,iBAAkBA,UCzBrBgB,EANO,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACpB,OAAOA,EACL,kBAAC,EAAD,CAAOlB,SAAWkB,IAClB,yBAAK7C,UAAU,YAAf,IAA4B,yBAAKA,UAAU,MAAOoB,IAAKC,EAAQ,IAAgCC,IAAI,2BCc1FwB,EAfH,WAAO,IAAD,EAE0BlC,mBAAS,MAFnC,mBAETiC,EAFS,KAEMjB,EAFN,KAIhB,OACE,oCACG,0BAAMX,MAAO,CAACC,QAAS,OAAQ6B,UAAW,SACzC,kBAAC,EAAD,CAAQnB,iBAAkBA,IAC1B,kBAAC,EAAD,CAAeiB,cAAeA,OCDlBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e787ef0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ccdf2e57.png\";","module.exports = __webpack_public_path__ + \"static/media/not_movie.5167aba2.jpg\";","import React  from \"react\";\r\n\r\nconst HeaderItem = ({objItem, changeCategory}) => {\r\n\r\n    const clickItem = (e) => {\r\n      e = objItem.category_id\r\n      changeCategory(e)\r\n    };\r\n\r\n  return (\r\n    <div className=\"col-md-2 mb-4\">\r\n      <button className=\"button_red_top\" onClick ={clickItem}>{objItem.category}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default HeaderItem;\r\n","export const getMovies = async () => {\r\n    let response = await fetch(\"https://moviesreactdjango.herokuapp.com/apis/full_Movies/\");\r\n    let json = await response.json();\r\n    return json;\r\n  };\r\n\r\n export const getItems = async () => {\r\n    let response = await fetch(`https://moviesreactdjango.herokuapp.com/apis/full_Category/`);\r\n    let json = await response.json();\r\n    return json;\r\n  };","import React, { useEffect, useState } from \"react\";\r\nimport HeaderItem from \"./HeaderItem\";\r\nimport {getItems} from \"../services/services\";\r\n\r\nconst Header = ({changeCategory}) => {\r\n  const [items, setItems] = useState([0]);\r\n\r\n\r\n  useEffect(() => {\r\n    getItems().then(setItems);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div style={{display: 'flex', justifyContent: 'center'}}><img className=\"row\"  src={require('../assets/img/logo.png')} alt=\"logo\" width=\"90%\"/></div>\r\n        <div className=\"row\">\r\n        {items.map((objItem) => {\r\n         return <HeaderItem objItem ={objItem} key={objItem.category_id}\r\n         changeCategory={changeCategory}/>;\r\n        })}\r\n        </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Movie = ({ objMovie, SetMovieSelected }) => {\r\n\r\n    const clickMovie = () => {\r\n        SetMovieSelected(objMovie);\r\n    };\r\n\r\n  return (\r\n    <div className=\"col-md-4 mb-4\">\r\n      <div className=\"card\">\r\n        <div className=\"imgMovie\" onClick ={clickMovie}>\r\n          <img src={objMovie.imagen} width=\"200\" alt={objMovie.title} className=\"card-img-top\" />\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <div className=\"card-text\">\r\n            <h1>{objMovie.title}</h1>\r\n          </div>\r\n          <div className=\"card-text\">\r\n            <h5><span><strong>Idioma:</strong> {objMovie.language}</span>\r\n            &nbsp;/&nbsp;\r\n            <span><strong>AÃ±o:</strong> {objMovie.relase_year}</span></h5>\r\n          </div>\r\n          {\r\n          SetMovieSelected\r\n          ? <button className=\"button_red\" onClick ={clickMovie}>VER EL TRAILER</button>\r\n          : <div className=\"selectedSinopsis\">{objMovie.sinopsis}</div>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Movie from \"./Movie\";\r\nimport {getMovies} from \"../services/services\";\r\nimport Header from \"./Header\";\r\nimport HeaderItem from \"./HeaderItem\"\r\n\r\n\r\nconst Movies = ({SetMovieSelected}) => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [sumar, setSumar] =useState(0)\r\n\r\n  useEffect(() => {\r\n    getMovies().then((rpta) => {\r\n      setMovies(rpta);\r\n    });\r\n  }, [sumar]);\r\n\r\n  const changeCategory = (sumar) => {\r\n    setSumar(sumar)\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className=\"col-md-8\">\r\n      <Header changeCategory={changeCategory}/>\r\n        <div className=\"row\">\r\n        {\r\n        sumar == 0\r\n        ? movies.map((objMovie) => {\r\n                 return <Movie objMovie ={objMovie} key={objMovie.movie_id}\r\n                 SetMovieSelected={SetMovieSelected}/>;\r\n                })\r\n        : movies.filter(filtMovie => filtMovie.category[0] == sumar).map((objMovie) => {\r\n                  return <Movie objMovie ={objMovie} key={objMovie.movie_id}\r\n                  SetMovieSelected={SetMovieSelected}/>;\r\n                 })\r\n        }\r\n        </div>\r\n        \r\n    </div>\r\n  );\r\n \r\n};\r\n\r\nexport default Movies;\r\n","import React from 'react'\r\nimport Movie from './Movie';\r\n\r\nconst MovieSelected = ({movieSelected}) => {\r\n    return movieSelected\r\n    ? <Movie objMovie ={movieSelected} />\r\n    : <div className=\"col-md-4\" > <img className=\"row\"  src={require('../assets/img/not_movie.jpg')} alt=\"Seleccionar Pelicula\"/></div>\r\n}\r\n\r\nexport default MovieSelected\r\n","import React, { useState } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport Movies from \"./components/Movies\";\r\nimport MovieSelected from \"./components/MovieSelected\";\r\n\r\nconst App = () => {\r\n\r\n  const [movieSelected, SetMovieSelected] = useState(null);\r\n  \r\n  return (\r\n    <>\r\n       <main style={{display: 'flex', marginTop: '10px'}}>\r\n        <Movies SetMovieSelected={SetMovieSelected}/>\r\n        <MovieSelected movieSelected={movieSelected}/>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/style_cards.css'; \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}